name: CI/CD Pipeline - Fase 2

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  security-events: write

jobs:
  build_and_test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm install

    - name: Run linter
      run: npm run lint

    - name: Run tests
      run: npm run test

    - name: Build application
      run: npm run build

    - name: Verificar conteúdo da pasta dist
      run: ls -R dist/ || echo "Diretório dist não encontrado!"

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: dist/
        retention-days: 1

  security_scan:
    runs-on: ubuntu-latest
    needs: build_and_test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run npm audit
      run: npm audit --audit-level=high

    - name: Run OWASP Dependency Check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: 'DevOps-na-Pratica'
        path: '.'
        format: 'HTML'
        out: 'reports'

    - name: Upload security reports
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: reports/
        retention-days: 5

  build_and_push_docker:
    needs: security_scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts
        path: dist/
        
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/devops-na-pratica:latest,${{ secrets.DOCKERHUB_USERNAME }}/devops-na-pratica:${{ github.sha }}
        cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/devops-na-pratica:buildcache
        cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/devops-na-pratica:buildcache,mode=max
        
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ secrets.DOCKERHUB_USERNAME }}/devops-na-pratica:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy SARIF result as artifact
      uses: actions/upload-artifact@v4
      with:
        name: trivy-sarif
        path: trivy-results.sarif


  deploy_to_staging:
    needs: build_and_push_docker
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment:
      name: staging
      url: https://staging.example.com
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Set up SSH
      uses: webfactory/ssh-agent@v0.7.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
        
    - name: Deploy to Staging Server
      env:
        DOCKER_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/devops-na-pratica:${{ github.sha }}
        SSH_HOST: ${{ secrets.STAGING_SSH_HOST }}
        SSH_USER: ${{ secrets.STAGING_SSH_USER }}
      run: |
        # Adicionar o host ao known_hosts para evitar prompts
        ssh-keyscan -H $SSH_HOST >> ~/.ssh/known_hosts
        
        # Copiar o script de deploy para o servidor
        scp deploy.sh $SSH_USER@$SSH_HOST:/tmp/deploy.sh
        scp rollback.sh $SSH_USER@$SSH_HOST:/tmp/rollback.sh
        
        # Executar o script de deploy remotamente
        ssh $SSH_USER@$SSH_HOST "chmod +x /tmp/deploy.sh && /tmp/deploy.sh staging $DOCKER_IMAGE"
        
    - name: Run Integration Tests
      env:
        STAGING_URL: https://staging.example.com
      run: |
        echo "Running integration tests against $STAGING_URL"
        npm install -g newman
        newman run tests/integration/postman_collection.json --environment tests/integration/staging_env.json
        
    - name: Verify Deployment
      run: |
        echo "Verificando deploy em ambiente de staging..."
        # Verificação de saúde da aplicação
        curl -f https://staging.example.com/health || {
          echo "Falha na verificação de saúde. Iniciando rollback..."
          ssh $SSH_USER@$SSH_HOST "chmod +x /tmp/rollback.sh && /tmp/rollback.sh staging"
          exit 1
        }
        echo "Deploy em staging concluído com sucesso!"

  deploy_to_production:
    needs: deploy_to_staging
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://production.example.com
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Set up SSH
      uses: webfactory/ssh-agent@v0.7.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
        
    - name: Deploy to Production Server
      env:
        DOCKER_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/devops-na-pratica:${{ github.sha }}
        SSH_HOST: ${{ secrets.PRODUCTION_SSH_HOST }}
        SSH_USER: ${{ secrets.PRODUCTION_SSH_USER }}
      run: |
        # Adicionar o host ao known_hosts para evitar prompts
        ssh-keyscan -H $SSH_HOST >> ~/.ssh/known_hosts
        
        # Copiar o script de deploy para o servidor
        scp deploy.sh $SSH_USER@$SSH_HOST:/tmp/deploy.sh
        scp rollback.sh $SSH_USER@$SSH_HOST:/tmp/rollback.sh
        
        # Executar o script de deploy remotamente com deploy canário (10% do tráfego)
        ssh $SSH_USER@$SSH_HOST "chmod +x /tmp/deploy.sh && /tmp/deploy.sh prod $DOCKER_IMAGE --canary 10"
        
        # Aguardar e monitorar métricas por 5 minutos
        echo "Monitorando deploy canário por 5 minutos..."
        sleep 300
        
        # Verificar métricas de erro
        ERROR_RATE=$(ssh $SSH_USER@$SSH_HOST "curl -s http://localhost:9090/api/v1/query?query=error_rate")
        if [[ $ERROR_RATE > 0.01 ]]; then
          echo "Taxa de erro acima do limite. Iniciando rollback..."
          ssh $SSH_USER@$SSH_HOST "chmod +x /tmp/rollback.sh && /tmp/rollback.sh prod"
          exit 1
        fi
        
        # Completar o deploy para 100% do tráfego
        ssh $SSH_USER@$SSH_HOST "chmod +x /tmp/deploy.sh && /tmp/deploy.sh prod $DOCKER_IMAGE --complete-canary"
        
    - name: Verify Production Deployment
      run: |
        echo "Verificando deploy em ambiente de produção..."
        # Verificação de saúde da aplicação
        curl -f https://production.example.com/health || {
          echo "Falha na verificação de saúde. Iniciando rollback..."
          ssh $SSH_USER@$SSH_HOST "chmod +x /tmp/rollback.sh && /tmp/rollback.sh prod"
          exit 1
        }
        echo "Deploy em produção concluído com sucesso!"
        
    - name: Notify deployment status
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        fields: repo,message,commit,author,action,eventName,ref,workflow
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
